"""
Schema, Query and Mutation
"""
schema {
  query: Query
  mutation: Mutation
}

scalar Coordinate

type Query {
  users: UsersResult!
  userProjects(userId: ID!): UserProjectsResult!
  userModels(userId: ID!): UserModelsResult
  allModels: UserModelsResult
  userLogin(email: String!, password: String!): UserLoginResult
  userLogout: UserLoginResult
  isConnected: UserLoginResult
}

type Mutation {
  createUser(email: String!, password: String!): CreateUserResult!
  createModel(modelName: String!, userId: ID!): CreateModelResult!
  createProject(projectName: String!, userId: ID!): CreateProjectResult!
  deleteModel(modelId: ID!, userId: ID!): DeletetionResult!
  deleteProject(projectId: ID!, userId: ID!): DeletetionResult!
  createModelFeature(
    modelId: ID!
    geometry: GeometryInput!
  ): CreateModelFeatureResult!
}

"""
Enums
"""
enum GeometryType {
  POINT
  MULTIPOINT
  LINESTRING
  MULTILINESTRING
  POLYGON
  MULTIPOLYGON
}

"""
Basic types
"""
type User {
  id: ID!
  email: String!
  projects: [Project]
  models: [Model]
}

type Geometry {
  id: ID!
  type: GeometryType!
  coordinates: [Coordinate!]!
  polygonHole: [Coordinate]
}

type Feature {
  id: ID!
  geometry: Geometry!
  properties: String!
  type: String!
}

type Model {
  id: ID!
  name: String!
  featureCollection: [Feature]!
}

type ProjectModel {
  id: ID!
  featureCollection: [Feature]!
  centerPoint: Coordinate!
  rotation: Float!
}

type Project {
  id: ID!
  name: String!
  models: [ProjectModel]!
  featureCollection: [Feature]
}

"""
Inputs
"""
input GeometryInput {
  type: String!
  coordinates: [Coordinate!]!
  polygonHole: [Coordinate]
}

"""
Query results types
"""
type UserLoginResult {
  success: Boolean!
  errors: [String]
  user: User
}

type UsersResult {
  success: Boolean!
  errors: [String]
  users: [User]
}

type UserProjectsResult {
  success: Boolean!
  errors: [String]
  projects: [Project]
}

type UserModelsResult {
  success: Boolean!
  errors: [String]
  models: [Model]
}

"""
Mutation results types
"""
type CreateUserResult {
  success: Boolean!
  errors: [String]
  user: User
}

type DeletetionResult {
  success: Boolean!
  errors: [String]
}

type CreateModelResult {
  success: Boolean!
  errors: [String]
  model: Model
}

type CreateProjectResult {
  success: Boolean!
  errors: [String]
  project: Project
}

type CreateModelFeatureResult {
  success: Boolean!
  errors: [String]
  model: Model
}
